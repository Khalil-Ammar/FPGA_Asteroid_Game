#ifndef HELLOWORLD_H
#define HELLOWORLD_H
#endif

#include <math.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xil_io.h"
#include "xil_exception.h"
#include "platform.h"
#include "stdbool.h"
#include "gpu.h"



// Hardware parameters
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define REFRESH_RATE 24 // in Hz

// Interrupt Controller and Inputs
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define BTN_INT 			XGPIO_IR_CH1_MASK


// Game Parameters
#define ENEMY_SHOOTING_DELAY 3 // in seconds
#define MAX_BULLET_COUNT 3
#define MAX_ENEMY_BULLET_COUNT 1
#define INIT_ASTRD_NBR	1
#define	INIT_LIVES 3

//----------------------------------------------------
// GLOBAL PARAMETERS
//----------------------------------------------------
struct Asteroid{
	int dx;
	int dy;
	int x;
	int y;
	bool isValid;
};

struct Bullet{
	int dx;
	int dy;
	int x;
	int y;
	bool isValid;
};

struct EnemySaucer{
	float dx;
	float dy;
	int x;
	int y;
	bool isValid;
};

struct SpaceShip{
	int x;
	int y;
};


XGpio BTNInst;
XScuGic INTCInst;
static int btn_value;
struct SpaceShip shipInstance;
struct EnemySaucer enemySaucerInstance;
int fire = 0;
int frame = 1;
int asteroidCount = 0;
bool isGameOver = 0;
bool hasFired = 0;
bool hasMoved = 0;
struct Asteroid asteroidArray[INIT_ASTRD_NBR];
struct Bullet bulletArray[MAX_BULLET_COUNT];
struct Bullet enemyBulletArray[MAX_ENEMY_BULLET_COUNT];


//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);
void InitSession();
void ResetShip();
void GameOver(bool hasWon);
void RenderGameOverScreen();





