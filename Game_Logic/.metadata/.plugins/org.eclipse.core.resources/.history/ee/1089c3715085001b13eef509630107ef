#include <math.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

#include "xparameters.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xil_io.h"
#include "xil_exception.h"
#include "platform.h"
#include "stdbool.h"



// Hardware parameters
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define REFRESH_RATE 24 // in Hz

// Interrupt Controller and Inputs
#define INTC_DEVICE_ID 		XPAR_PS7_SCUGIC_0_DEVICE_ID
#define BTNS_DEVICE_ID		XPAR_AXI_GPIO_0_DEVICE_ID
#define INTC_GPIO_INTERRUPT_ID XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define BTN_INT 			XGPIO_IR_CH1_MASK


// Game Parameters
#define ENEMY_SHOOTING_DELAY 3 // in seconds
#define MAX_BULLET_COUNT 3
#define MAX_ENEMY_BULLET_COUNT 1
#define INIT_ASTRD_NBR	1
#define	INIT_LIVES 3

//Structs
extern struct Asteroid{
	int dx;
	int dy;
	int x;
	int y;
	bool isValid;
};

extern struct Bullet{
	int dx;
	int dy;
	int x;
	int y;
	bool isValid;
};

extern struct EnemySaucer{
	float dx;
	float dy;
	int x;
	int y;
	bool isValid;
};

extern struct SpaceShip{
	int x;
	int y;
};


//----------------------------------------------------
// GLOBAL PARAMETERS
//----------------------------------------------------
XGpio BTNInst;
XScuGic INTCInst;
static int btn_value;
extern struct SpaceShip shipInstance;
extern struct EnemySaucer enemySaucerInstance;
int fire = 0;
int frame = 1;
int asteroidCount = 0;
bool isGameOver = 0;
bool hasFired = 0;
bool hasMoved = 0;
extern struct Asteroid asteroidArray[INIT_ASTRD_NBR];
extern struct Bullet bulletArray[MAX_BULLET_COUNT];
extern struct Bullet enemyBulletArray[MAX_ENEMY_BULLET_COUNT];


//----------------------------------------------------
// PROTOTYPE FUNCTIONS
//----------------------------------------------------
static void BTN_Intr_Handler(void *baseaddr_p);
static int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
static int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);
void InitSession();
void ResetShip();
void GameOver(bool hasWon);
void RenderGameOverScreen();

//----------------------------------------------------
// INTERRUPT HANDLER FUNCTIONS
// - called by the timer, button interrupt, performs
// - LED flashing
//----------------------------------------------------

void BTN_Intr_Handler(void *InstancePtr)
{

	// Disable GPIO interrupts
	XGpio_InterruptDisable(&BTNInst, BTN_INT);

	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&BTNInst) & BTN_INT) !=
			BTN_INT) {
			return;
		}

	//debounce
	int new_btn_value;
	do{
	btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	usleep(20);
	new_btn_value = XGpio_DiscreteRead(&BTNInst, 1);
	}while(new_btn_value != btn_value);

	if(btn_value == 16) {
		hasMoved = 1;
		shipInstance.y = shipInstance.y - 6;
		if (shipInstance.y<0){
			shipInstance.y=shipInstance.y+480;
		}
	}

	if(btn_value == 2){
		hasMoved = 1;
		shipInstance.y = shipInstance.y + 6;
		if(shipInstance.y > 480){
			shipInstance.y = shipInstance.y-480;
		}
	}

	if(btn_value == 8){
		hasMoved = 1;
		shipInstance.x = shipInstance.x + 6;
		if(shipInstance.x> 640){
			shipInstance.x = shipInstance.x-640;
		}
	}

	if(btn_value == 4){
		hasMoved = 1;
		shipInstance.x = shipInstance.x - 6;
		if(shipInstance.x<0){
			shipInstance.x = shipInstance.x+640;
		}
	}

	if(btn_value == 1) {
			hasFired = 1;
	}

    (void)XGpio_InterruptClear(&BTNInst, BTN_INT);

    // Enable GPIO interrupts
    XGpio_InterruptEnable(&BTNInst, BTN_INT);
}


bool testOverlap(int x1, int x2, int y1, int y2) {
  return (x1 >= y1 && x1 <= y2) ||
         (x2 >= y1 && x2 <= y2) ||
         (y1 >= x1 && y1 <= x2) ||
         (y2 >= x1 && y2 <= x2);
}

//----------------------------------------------------
// INITIAL SETUP FUNCTIONS
//----------------------------------------------------

int InterruptSystemSetup(XScuGic *XScuGicInstancePtr)
{
	// Enable interrupt
	XGpio_InterruptEnable(&BTNInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&BTNInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 	 	 	 	 	 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
			 	 	 	 	 	 XScuGicInstancePtr);
	Xil_ExceptionEnable();


	return XST_SUCCESS;

}

int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr)
{
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialisation
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst,
					  	  	 INTC_GPIO_INTERRUPT_ID,
					  	  	 (Xil_ExceptionHandler)BTN_Intr_Handler,
					  	  	 (void *)GpioInstancePtr);
	if(status != XST_SUCCESS) return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, INTC_GPIO_INTERRUPT_ID);

	return XST_SUCCESS;
}

void InitSession(){
	//init asteroid, bullet, and enemy bullet registers as invalid
	InitRegisters();

	// render user ship
	shipInstance.x = SCREEN_WIDTH>>1;
	shipInstance.y = SCREEN_HEIGHT>>1;
	RenderShip();

	//render enemy saucer
	enemySaucerInstance.dx = rand() % 2 + 1;
	enemySaucerInstance.dy = rand() % 2 + 1;
	enemySaucerInstance.x = rand() % 440 + 50;
	enemySaucerInstance.y = rand() % 100;
	enemySaucerInstance.isValid = 1;
	RenderEnemySaucer(enemySaucerInstance);

	// render asteroids
	struct Asteroid asteroidInst;
	for (int i = 0; i < asteroidCount; i++ ){
		asteroidInst.dx = rand() % 2 + 1;
		asteroidInst.dy = rand() % 2 + 1;
		asteroidInst.x = rand() % 540 + 50;
		asteroidInst.y = rand() % 280 + 50;
		asteroidInst.isValid = 1;
		asteroidArray[i] = asteroidInst;
		RenderAsteroid(asteroidInst);
	}



}

//----------------------------------------------------
// HELPER FUNCTIONS
//----------------------------------------------------
void ResetShip(){
	// reset ship coordinates
	shipInstance.x = SCREEN_WIDTH>>1;
	shipInstance.y = SCREEN_HEIGHT>>1;

	// render ship
	RenderShip();
}

void GameOver(bool hasWon){
	if(hasWon){
		xil_printf("Game Over, You Win!");
	}
	else{
		xil_printf("Game Over, You Lost!");
	}
	RenderGameOverScreen();
}



